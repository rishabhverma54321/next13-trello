datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id
  name          String?
  email         String?
  image         String?
  organizations Orgusers[]

  boards        Boardusers[]
 
 
}

model Organization {
  id           String    @id
  title        String
  image        String
  users        Orgusers[]
  
  
  createdAt    DateTime    @default(now())
} 


model Orgusers{

  id           String   @id @default(uuid())
  userId       String
  orgId        String
  
  user         User  @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [orgId], references: [id])



}

model Boardusers {
  id          String   @id @default(uuid())
  userId      String
  boardId     String

  user        User    @relation(fields: [userId], references: [id])
  board       Board   @relation(fields: [boardId], references: [id])
}


model Board {
  id            String @id @default(uuid())
  orgId         String
 

  title         String
  imageId       String
  imageThumbUrl String @db.Text
  imageFullUrl  String @db.Text
  imageUserName String @db.Text
  imageLinkHTML String @db.Text
  completed     Boolean @default(false)

 
  users         Boardusers[]
  lists         List[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}



model List {
  id        String @id @default(uuid())
  title     String
  order     Int

  boardId   String
  board     Board @relation(fields: [boardId], references: [id], onDelete: Cascade)

  cards     Card[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([boardId])
}

model Card {
  id          String      @id @default(uuid())
  title       String
  order       Int
  description String?     @db.Text

  listId      String
  list        List        @relation(fields: [listId], references: [id], onDelete: Cascade)

  comments    Comment[]   @relation("CardToComments")
  files       File[]      @relation("CardToFile")

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([listId])
}

model Comment {
  id          String      @id @default(uuid())
  comment     String
  cardId      String      // Add a field to store the ID of the card associated with this comment
  card        Card        @relation("CardToComments", fields: [cardId], references: [id], onDelete: Cascade)
  
  userId      String
  userImage   String @db.Text
  userName    String @db.Text
  userRole    String 

  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt
}

model File{
  id          String      @id @default(uuid())
  userId      String
  fileName    String       
  downloadUrl String
  cardId      String
  card        Card        @relation("CardToFile", fields: [cardId], references: [id],  onDelete: Cascade)

  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt
}



enum ACTION {
  CREATE
  UPDATE
  DELETE
  POST
}

enum ENTITY_TYPE {
  BOARD
  LIST
  CARD
  COMMENT
}

model AuditLog {
  id          String  @id @default(uuid())
  orgId       String
  action      ACTION
  entityId    String
  entityType  ENTITY_TYPE
  entityTitle String
  userId      String
  userImage   String @db.Text
  userName    String @db.Text
  isRead      Boolean @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime  @updatedAt
}

model OrgLimit {
  id          String @id @default(uuid())
  orgId       String @unique
  count       Int @default(0)

  createdAt   DateTime @default(now())
  updatedAt   DateTime  @updatedAt
}

model OrgSubscription {
  id                String @id @default(uuid())
  orgId             String @unique

  stripeCustomerId  String? @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId String? @unique @map(name: "stripe_subscription_id")
  stripePriceId        String? @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}